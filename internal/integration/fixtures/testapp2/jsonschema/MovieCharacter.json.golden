{
  "description": "MovieCharacter is a character not just in a story, but particularly in a movie.  NOTE that this is not for actors, but for characters in movies. MUST BE COMPLETELY FICTITIONAL.  DO NOT COPY REAL CHARACTERS FROM REAL MOVIES!  YOU WILL BE SUED FOR COPYRIGHT INFRINGEMENT.\n\n\n\n## **Properties**\n\n### name\n\nis the character's legal name.\n\n### nicknames\n\nis what they're called by their friends, and also by their enemies or detractors\n\n### location\n\nis which movie-making industry they come from in.\n\n### favoriteWeapons\n\nchoose up to five\n\n### dateOfBirth\n\nis when they were born.\n\n### backStory\n\ndescribes how this character came to be who they are\n\n### importantDates\n\nis a list of major events that happen in the person's life. List at least three.\n\n",
  "type": "object",
  "properties": {
    "name": {
      "type": "string"
    },
    "nicknames": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "location": {
      "description": "## Values\n\n### HollyWood\n\nUnited States (English-language films)\n\n### BollyWood\n\nIndia (Hindi-language films)\n\n### TollyWood\n\nIndia (Telugu-language films and Bengali-language films, used in two contexts)\n\n### KollyWood\n\nIndia (Tamil-language films)\n\n### SandalWood\n\nIndia (Kannada-language films)\n\n### MollyWood\n\nIndia (Malayalam-language films)\n\n### LollyWood\n\nPakistan (Urdu- and Punjabi-language films)\n\n### Chollywood\n\nPeru\n\n### Nollywood\n\nNigeria (English- and indigenous-language films)\n\n### HallyuWood\n\nSouth Korea (Korean Wave cinema)\n\n### Pollywood\n\nPunjab region (Punjabi-language films, used in India and Pakistan)\n\n### DhallyWood\n\nBangladesh (Bengali-language films)",
      "enum": [
        "HollyWood",
        "BollyWood",
        "TollyWood",
        "KollyWood",
        "SandalWood",
        "MollyWood",
        "LollyWood",
        "Chollywood",
        "Nollywood",
        "HallyuWood",
        "Pollywood",
        "DhallyWood"
      ],
      "type": "string"
    },
    "alignment": {
      "enum": [
        "good",
        "neutral",
        "evil"
      ],
      "type": "string"
    },
    "favoriteWeapons": {
      "items": {
        "description": "## Values\n\n### Sword\n\nA classic melee weapon.\n\n### Bow\n\nTraditional ranged weapon with arrows.\n\n### Spear\n\nLong polearm weapon.\n\n### SaturdayNightSpecial\n\nSmall, inexpensive handgun.\n\n### Grenade\n\nExplosive throwable weapon.\n\n### Bazooka\n\nShoulder-fired rocket launcher.\n\n### SodaStrawSpitballs\n\nSilly, improvised ranged weapon.\n\n### OceanEvaporatingLaser\n\nExtreme, sci-fi superweapon.\n\n### Crossbow\n\nBow-like mechanical ranged weapon.\n\n### Flamethrower\n\nWeapon emitting flames.\n\n### Katana\n\nJapanese curved sword.\n\n### Chainsaw\n\nMelee weapon of destruction.\n\n### Nunchaku\n\nTraditional martial arts weapon.\n\n### Slingshot\n\nSimple ranged weapon.\n\n### Blowgun\n\nSimple tube-based ranged weapon.\n\n### PaperAirplaneCutouts\n\nSilly improvised \"weapon.\"\n\n### TacticalNuke\n\nCompact nuclear weapon.\n\n### LaserPointerBlinder\n\nBlinding weapon using lasers.\n\n### BallisticMissile\n\nStrategic weapon for massive destruction.\n\n### Boomerang\n\nRanged weapon that can return to the thrower.\n\n### RocketLauncher\n\nWeapon for launching rockets.\n\n### FryingPan\n\nSilly yet effective improvised melee weapon.\n\n### PocketKnife\n\nSmall, versatile blade.\n\n### HarpoonGun\n\nUnderwater projectile weapon.\n\n### GravityHammer\n\nExtreme, sci-fi melee weapon.\n\n### Peashooter\n\nComically weak ranged weapon.\n\n### GatlingGun\n\nRapid-fire gun.\n\n### PlasmaCannon\n\nSci-fi energy-based weapon.\n\n### SnowballLauncher\n\nSilly winter-themed ranged weapon.\n\n### MorningStar\n\nSpiked mace.\n\n### LaserSword\n\nSci-fi melee weapon akin to a lightsaber.",
        "enum": [
          "Sword",
          "Bow",
          "Spear",
          "SaturdayNightSpecial",
          "Grenade",
          "Bazooka",
          "SodaStrawSpitballs",
          "OceanEvaporatingLaser",
          "Crossbow",
          "Flamethrower",
          "Katana",
          "Chainsaw",
          "Nunchaku",
          "Slingshot",
          "Blowgun",
          "PaperAirplaneCutouts",
          "TacticalNuke",
          "LaserPointerBlinder",
          "BallisticMissile",
          "Boomerang",
          "RocketLauncher",
          "FryingPan",
          "PocketKnife",
          "HarpoonGun",
          "GravityHammer",
          "Peashooter",
          "GatlingGun",
          "PlasmaCannon",
          "SnowballLauncher",
          "MorningStar",
          "LaserSword"
        ],
        "type": "string"
      },
      "type": "array"
    },
    "dateOfBirth": {
      "$ref": "#/$defs/LLMFriendlyTime"
    },
    "backStory": {
      "type": "string"
    },
    "importantDates": {
      "items": {
        "type": "object",
        "properties": {
          "when": {
            "$ref": "#/$defs/LLMFriendlyTime"
          },
          "whatHappened": {
            "type": "string"
          },
          "withWhom": {
            "type": "string"
          }
        },
        "required": [
          "when",
          "whatHappened",
          "withWhom"
        ],
        "additionalProperties": false
      },
      "type": "array"
    }
  },
  "required": [
    "name",
    "nicknames",
    "location",
    "alignment",
    "favoriteWeapons",
    "dateOfBirth",
    "backStory",
    "importantDates"
  ],
  "additionalProperties": false,
  "$defs": {
    "TimeUnit": {
      "description": "Choose the unit of time given by the user.",
      "enum": [
        "minutes",
        "hours",
        "weeks",
        "days",
        "months",
        "years"
      ],
      "type": "string"
    },
    "TimeFrame": {
      "enum": [
        "Past",
        "Future"
      ],
      "type": "string"
    },
    "LLMFriendlyTime": {
      "anyOf": [
        {
          "description": "TimeAgo reflects a relative time in the past, given in units of time relative to the present time.\n\n\n\n## **Properties**\n\n### unit\n\nChoose the unit of as given.\n\n### quantity\n\nEnter the number of the selected unit.\n\n",
          "type": "object",
          "properties": {
            "unit": {
              "$ref": "#/$defs/TimeUnit"
            },
            "quantity": {
              "type": "integer"
            },
            "__type__": {
              "const": "TimeAgo"
            }
          },
          "required": [
            "unit",
            "quantity",
            "__type__"
          ],
          "additionalProperties": false
        },
        {
          "description": "TimeFromNow represents a relative time in the future, and is given as a time unit and quantity, for instance \"7 weeks\" (from now).\n\n\n\n## **Properties**\n\n### unit\n\nChoose the unit of as given.\n\n### value\n\nEnter the number of the selected unit.\n\n",
          "type": "object",
          "properties": {
            "unit": {
              "$ref": "#/$defs/TimeUnit"
            },
            "value": {
              "type": "integer"
            },
            "__type__": {
              "const": "TimeFromNow"
            }
          },
          "required": [
            "unit",
            "value",
            "__type__"
          ],
          "additionalProperties": false
        },
        {
          "description": "ActualTime is for when the time reference can be explicitly tied to a specific year.  Examples: \"the beginning of 2004\" -\u003e \"2004-01-01\", \"Feb 14 2013\" -\u003e \"2013-02-14\"",
          "type": "object",
          "properties": {
            "dateTime": {
              "type": "string"
            },
            "__type__": {
              "const": "ActualTime"
            }
          },
          "required": [
            "dateTime",
            "__type__"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "__type__": {
              "const": "Now"
            }
          },
          "required": [
            "__type__"
          ],
          "additionalProperties": false
        },
        {
          "type": "object",
          "properties": {
            "__type__": {
              "const": "BeginningOfTime"
            }
          },
          "required": [
            "__type__"
          ],
          "additionalProperties": false
        },
        {
          "description": "NearestDay is selected when the user has specified a day of the week, such as last Friday or next Saturday, or two Wednesdays ago.\n\n\n\n## **Properties**\n\n### scale\n\nis the number of weeks to count. Normally it is one (1). In the example of \"two Wednesdays ago\" the scale is two (2).\n\n",
          "type": "object",
          "properties": {
            "timeFrame": {
              "$ref": "#/$defs/TimeFrame"
            },
            "dayOfWeek": {
              "enum": [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday"
              ],
              "type": "string"
            },
            "scale": {
              "type": "integer"
            },
            "__type__": {
              "const": "NearestDay"
            }
          },
          "required": [
            "timeFrame",
            "dayOfWeek",
            "scale",
            "__type__"
          ],
          "additionalProperties": false
        },
        {
          "description": "\n\n\n\n## **Properties**\n\n### timeFrame\n\nspecifies whether the reference looks into the future or into the past.\n\n### dayOfMonth\n\nshould be 1 if not specified, otherwise the specific day of the month given by the user.\n\n",
          "type": "object",
          "properties": {
            "timeFrame": {
              "$ref": "#/$defs/TimeFrame"
            },
            "month": {
              "description": "## Values\n\n### January\n\nFirst month of the year.\n\n### February\n\nSecond month of the year.\n\n### March\n\nThird month of the year.\n\n### April\n\nFourth month of the year.\n\n### May\n\nFifth month of the year.\n\n### June\n\nSixth month of the year.\n\n### July\n\nSeventh month of the year.\n\n### August\n\nEighth month of the year.\n\n### September\n\nNinth month of the year.\n\n### October\n\nTenth month of the year.\n\n### November\n\nEleventh month of the year.\n\n### December\n\nTwelfth month of the year.",
              "enum": [
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December"
              ],
              "type": "string"
            },
            "dayOfMonth": {
              "type": "integer"
            },
            "__type__": {
              "const": "NearestDate"
            }
          },
          "required": [
            "timeFrame",
            "month",
            "dayOfMonth",
            "__type__"
          ],
          "additionalProperties": false
        }
      ]
    }
  }
}