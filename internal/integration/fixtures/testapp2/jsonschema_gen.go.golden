// Code generated by github.com/tylergannon/go-gen-jsonschema; DO NOT EDIT.
package testapp2

import (
	"embed"
	"encoding/json"
	"errors"
	"fmt"

	llmfriendlytimepkg "github.com/tylergannon/go-gen-jsonschema-testapp/llmfriendlytimepkg"
)

//go:embed jsonschema
var __jsonschemaImports embed.FS

func (MovieCharacter) Schema() ([]byte, error) {
	return __jsonschemaImports.ReadFile("jsonschema/MovieCharacter.json")
}

var errNoDiscriminator = errors.New("no discriminator __type__ provided")

func (it *LLMFriendlyTime) UnmarshalJSON(data []byte) error {
	var (
		temp          map[string]json.RawMessage
		err           error
		discriminator string
	)

	if err = json.Unmarshal(data, &temp); err != nil {
		return fmt.Errorf("data does not conform to map[string]json.RawMessage: %w", err)
	}
	if discTemp, ok := temp["__type__"]; !ok {
		return errNoDiscriminator
	} else {
		if err = json.Unmarshal(discTemp, &discriminator); err != nil {
			return fmt.Errorf("discriminator value is not a string: %w", err)
		}
	}
	switch discriminator {

	case "TimeAgo":
		var __TimeAgo llmfriendlytimepkg.TimeAgo
		err = json.Unmarshal(data, &__TimeAgo)
		if err != nil {
			return fmt.Errorf("unmarshaling TimeAgo: %w", err)
		}
		*it, err = TimeAgoToLLMFriendlyTime(__TimeAgo)

	case "TimeFromNow":
		var __TimeFromNow llmfriendlytimepkg.TimeFromNow
		err = json.Unmarshal(data, &__TimeFromNow)
		if err != nil {
			return fmt.Errorf("unmarshaling TimeFromNow: %w", err)
		}
		*it, err = FromNowToLLMFriendlyTime(__TimeFromNow)

	case "ActualTime":
		var __ActualTime llmfriendlytimepkg.ActualTime
		err = json.Unmarshal(data, &__ActualTime)
		if err != nil {
			return fmt.Errorf("unmarshaling ActualTime: %w", err)
		}
		*it, err = ActualTimeToLLMFriendlyTime(__ActualTime)

	case "Now":
		var __Now llmfriendlytimepkg.Now
		err = json.Unmarshal(data, &__Now)
		if err != nil {
			return fmt.Errorf("unmarshaling Now: %w", err)
		}
		*it, err = NowToLLMFriendlyTime(__Now)

	case "BeginningOfTime":
		var __BeginningOfTime llmfriendlytimepkg.BeginningOfTime
		err = json.Unmarshal(data, &__BeginningOfTime)
		if err != nil {
			return fmt.Errorf("unmarshaling BeginningOfTime: %w", err)
		}
		*it, err = BeginningOfTimeToLLMFriendlyTime(__BeginningOfTime)

	case "NearestDay":
		var __NearestDay llmfriendlytimepkg.NearestDay
		err = json.Unmarshal(data, &__NearestDay)
		if err != nil {
			return fmt.Errorf("unmarshaling NearestDay: %w", err)
		}
		*it, err = NearestDayToTime(__NearestDay)

	case "NearestDate":
		var __NearestDate llmfriendlytimepkg.NearestDate
		err = json.Unmarshal(data, &__NearestDate)
		if err != nil {
			return fmt.Errorf("unmarshaling NearestDate: %w", err)
		}
		*it, err = NearestDateToTime(__NearestDate)

	default:
		return fmt.Errorf("unknown discriminator %s", discriminator)
	}

	return err
}

var _ json.Unmarshaler = (*LLMFriendlyTime)(nil)
