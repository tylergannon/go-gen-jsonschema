{"type":"object","description":"Call this function when the flattened struct info you receive has got a named type instead of pure-native Go types.  Named types are present in the flattened struct type when the type is a union type.  Look in the test data for the discriminator value used to select the union type, and present that along with the type name. Use the FULL package path of the type as found in the imports block of the file. List all the union types found in the struct. If the result of a function call also contains a union type, you can call this function again with new union types as you find them.\nNOTE: Do not bother with union types in the schema that are not present in the test data. Those will be handled by other test data.","properties":{"unionTypesFound":{"type":"array","description":"Include a separate entry for each union type instance found in the test data.","items":{"type":"object","properties":{"discriminator":{"type":"string","description":"The value given in the test data that selects the union type."},"typeName":{"type":"string","description":"The name of the interface type at the corresponding position of the struct, to the union type being instantiated."},"pkgPath":{"type":"string","description":"The full package path of the type.  Leave blank if the type has no package alias (and is therefore defined in the current package)."}},"required":["discriminator","typeName","pkgPath"]}}},"required":["unionTypesFound"]}
