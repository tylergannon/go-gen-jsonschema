//go:build !jsonschema
// +build !jsonschema

// Code generated by go-gen-jsonschema. DO NOT EDIT.
package interfaces

import (
	"embed"
	"encoding/json"
	"errors"
	"fmt"
)

//go:embed jsonschema
var __gen_jsonschema_fs embed.FS

var errNoDiscriminator = errors.New("no discriminator property '!type' found")

func __gen_jsonschema_panic(fname string, err error) {
	panic(fmt.Sprintf("error reading %s from embedded FS: %s", fname, err.Error()))
}

func (FancyStruct) Schema() json.RawMessage {
	const fileName = "jsonschema/FancyStruct.json"
	data, err := __gen_jsonschema_fs.ReadFile(fileName)
	if err != nil {
		__gen_jsonschema_panic(fileName, err)
	}
	return data
}

// UnmarshalJSON is a generated custom json.Unmarshaler implementation for
// FancyStruct.
func (f *FancyStruct) UnmarshalJSON(b []byte) (err error) {
	type Alias FancyStruct
	type Wrapper struct {
		Alias
		IFace json.RawMessage `json:"iface"`
	}
	var wrapper Wrapper
	if err = json.Unmarshal(b, &wrapper); err != nil {
		return err
	}
	*f = FancyStruct(wrapper.Alias)
	if f.IFace, err = __jsonUnmarshal__interfaces__TestInterface(wrapper.IFace); err != nil {
		return err
	}
	return nil
}
func __jsonUnmarshal__interfaces__TestInterface(data []byte) (TestInterface, error) {
	var (
		temp          map[string]json.RawMessage
		discriminator string
		err           = json.Unmarshal(data, &temp)
	)

	if err != nil {
		return nil, err
	} else if _tempDiscriminator, ok := temp["!type"]; !ok {
		return nil, errNoDiscriminator
	} else if err = json.Unmarshal(_tempDiscriminator, &discriminator); err != nil {
		return nil, __jsonschema__unmarshalDiscriminatorError(_tempDiscriminator, err)
	}
	switch discriminator {
	case "TestInterface1":
		var obj TestInterface1
		if err = json.Unmarshal(data, &obj); err != nil {
			return nil, err
		}
		return obj, nil
	case "TestInterface2":
		var obj TestInterface2
		if err = json.Unmarshal(data, &obj); err != nil {
			return nil, err
		}
		return obj, nil
	case "PointerToTestInterface":
		var obj PointerToTestInterface
		if err = json.Unmarshal(data, &obj); err != nil {
			return nil, err
		}
		return &obj, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", discriminator)
	}
}

func __jsonschema__unmarshalDiscriminatorError(discriminator json.RawMessage, err error) error {
	return fmt.Errorf("unable to unmarshal discriminator value %v: %w", discriminator, err)
}
