//go:build !jsonschema
// +build !jsonschema

// Code generated by go-gen-jsonschema. DO NOT EDIT.
package basictypes

import (
	"embed"
	"encoding/json"
	"errors"
	"fmt"
)

//go:embed jsonschema
var __gen_jsonschema_fs embed.FS

var errNoDiscriminator = errors.New("no discriminator property '!type' found")

func __gen_jsonschema_panic(fname string, err error) {
	panic(fmt.Sprintf("error reading %s from embedded FS: %s", fname, err.Error()))
}

func (EnumType) Schema() json.RawMessage {
	const fileName = "jsonschema/EnumType.json"
	data, err := __gen_jsonschema_fs.ReadFile(fileName)
	if err != nil {
		__gen_jsonschema_panic(fileName, err)
	}
	return data
}

func (SliceOfEnumType) Schema() json.RawMessage {
	const fileName = "jsonschema/SliceOfEnumType.json"
	data, err := __gen_jsonschema_fs.ReadFile(fileName)
	if err != nil {
		__gen_jsonschema_panic(fileName, err)
	}
	return data
}

func (SliceOfRemoteEnumType) Schema() json.RawMessage {
	const fileName = "jsonschema/SliceOfRemoteEnumType.json"
	data, err := __gen_jsonschema_fs.ReadFile(fileName)
	if err != nil {
		__gen_jsonschema_panic(fileName, err)
	}
	return data
}

func (SliceOfPointerToRemoteEnum) Schema() json.RawMessage {
	const fileName = "jsonschema/SliceOfPointerToRemoteEnum.json"
	data, err := __gen_jsonschema_fs.ReadFile(fileName)
	if err != nil {
		__gen_jsonschema_panic(fileName, err)
	}
	return data
}
