{{/* gotype:github.com/tylergannon/go-gen-jsonschema/internal/builder.SchemaBuilder*/ -}}
// Code generated by go-gen-jsonschema. DO NOT EDIT.
//go:build !{{.BuildTag}}
// +build !{{.BuildTag}}
package {{.Scan.Pkg.Name}}

import (
    "embed"
    "encoding/json"
	"errors"
    "fmt"
	"bytes"
	"text/template"
	{{ range .Imports}}
	{{.}}
	{{ end -}}
)
{{ $subdir := .Subdir -}}
{{ $discriminatorProp := .DiscriminatorProp}}
//go:embed {{$subdir}}
var __gen_jsonschema_fs embed.FS

var errNoDiscriminator = errors.New("no discriminator property '{{$discriminatorProp}}' found")

func __gen_jsonschema_panic(fname string, err error) {
	panic(fmt.Sprintf("error reading %s from embedded FS: %s", fname, err.Error()))
}

{{/* Generate per-method helper when providers exist */}}
{{ range .SchemaMethods }}
    {{ $recvName := .Receiver.TypeName -}}
    {{ $methName := .SchemaMethodName -}}
    {{ range $.TypeProviders }}
        {{ if and (eq .TypeName $recvName) (gt (len .Providers) 0) }}
                func (r {{if $.SchemaMethods | len | gt 0}}{{end}}{{if .IsPointer}}*{{end}}{{ $recvName }}) __schemaData__{{$recvName}}__{{$methName}}() (map[string]string, error) {
                    data := make(map[string]string)
                    var (
                        m json.Marshaler
                        b []byte
                        err error
                    )
                    {{ range .Providers -}}
                        {{ $fname := .FieldName -}}
                        {{ if eq .Kind "WithStructAccessorMethod" -}}
                            m = r.{{.ProviderName}}()
                        {{ else if eq .Kind "WithStructFunctionMethod" -}}
                            {{ if .ProviderIsMethod -}}
                                m = r.{{.ProviderName}}(r.{{$fname}})
                            {{ else -}}
                                m = {{.ProviderName}}(r, r.{{$fname}})
                            {{ end -}}
                        {{ else if eq .Kind "WithFunction" -}}
                            m = {{.ProviderName}}(r.{{$fname}})
                        {{ end -}}
                        if b, err = m.MarshalJSON(); err != nil { return nil, err }
                        data["{{.JSONName}}"] = string(b)
                    {{ end -}}
                    return data, nil
                }
        {{ end }}
    {{ end }}
{{ end -}}

{{ range .SchemaMethods }}
{{/* If providers exist, name the receiver to call helper; else keep prior signature shape */}}
    {{ $recvName := .Receiver.TypeName -}}
    {{ $methName := .SchemaMethodName -}}
    {{ $found := false -}}
    {{ range $.TypeProviders }}
        {{ if and (eq .TypeName $recvName) (gt (len .Providers) 0) }}
            {{ $found = true -}}
        {{ end }}
    {{ end }}
    {{ if $found -}}
func (r {{if .IsPointer}}*{{end}}{{.Receiver.TypeName}}) {{.SchemaMethodName}}() json.RawMessage {
	const fileName = "{{$subdir}}/{{.Receiver.TypeName}}.json.tmpl"
    tplBytes, err := __gen_jsonschema_fs.ReadFile(fileName)
    if err != nil { __gen_jsonschema_panic(fileName, err) }
    data, err := r.__schemaData__{{$recvName}}__{{$methName}}()
    if err != nil { __gen_jsonschema_panic(fileName, err) }
    var out bytes.Buffer
    if err := template.Must(template.New("").Parse(string(tplBytes))).Execute(&out, data); err != nil { __gen_jsonschema_panic(fileName, err) }
    return json.RawMessage(out.Bytes())
}
    {{ else -}}
func ({{if .IsPointer}}*{{end}}{{.Receiver.TypeName}}) {{.SchemaMethodName}}() json.RawMessage {
	const fileName = "{{$subdir}}/{{.Receiver.TypeName}}.json"
	data, err := __gen_jsonschema_fs.ReadFile(fileName)
	if err != nil {
		__gen_jsonschema_panic(fileName, err)
    }
	return data
}
    {{ end -}}
{{ end -}}
{{ range .SpecialTypes -}}
{{$initial := .Initial -}}
// UnmarshalJSON is a generated custom json.Unmarshaler implementation for
// {{.Name}}.
func ({{.Initial}} *{{.Name}}) UnmarshalJSON(b []byte) (err error) {
	type Alias {{.Name}}
	type Wrapper struct {
		Alias
		{{range .InterfaceProps -}}
		{{.FieldNames}} json.RawMessage {{.StructTag}}
		{{ end -}}
	}
	var wrapper Wrapper
	if err = json.Unmarshal(b, &wrapper); err != nil {
		return err
	}
	*{{.Initial}} = {{.Name}}(wrapper.Alias)
	{{range $i, $prop := .InterfaceProps -}}
	{{if eq $i 0}}if{{else}} else if{{end}} {{$initial}}.{{$prop.FieldNames}}, err = {{$prop.UnmarshalerFunc}}(wrapper.{{$prop.FieldNames}}); err != nil {
		return err
	}{{end}}
	return nil
}
{{ end -}}
{{ range .Interfaces -}}
func {{.UnmarshalerFunc}}(data []byte) ({{.TypeNameWithPrefix}}, error) {
	var (
		temp          map[string]json.RawMessage
		discriminator string
		err         = json.Unmarshal(data, &temp)
	)

	if err != nil {
		return nil, err
	} else if _tempDiscriminator, ok := temp["{{$discriminatorProp}}"]; !ok {
		return nil, errNoDiscriminator
	} else if err = json.Unmarshal(_tempDiscriminator, &discriminator); err != nil {
		return nil, __jsonschema__unmarshalDiscriminatorError(_tempDiscriminator, err)
	}
	switch discriminator {
	{{range .Options -}}
	case "{{.Discriminator}}":
		var obj {{.TypeNameWithPrefix}}
		if err = json.Unmarshal(data, &obj); err != nil {
			return nil, err
		}
		return {{if .Pointer}}&{{end}}obj, nil
	{{ end -}}
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", discriminator)
	}
}
{{ end }}
{{ if .HaveInterfaces -}}
func __jsonschema__unmarshalDiscriminatorError(discriminator json.RawMessage, err error) error {
	return fmt.Errorf("unable to unmarshal discriminator value %v: %w", discriminator, err)
}
{{ end -}}