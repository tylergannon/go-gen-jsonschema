{{/* gotype:github.com/tylergannon/go-gen-jsonschema/internal/builder.SchemaBuilder*/ -}}
// Code generated by go-gen-jsonschema. DO NOT EDIT.
//go:build !{{.BuildTag}}
// +build !{{.BuildTag}}
package {{.Scan.Pkg.Name}}

import (
    "embed"
    "encoding/json"
	"errors"
    "fmt"
	{{ range .Imports}}
	{{.}}
	{{ end -}}
)
{{ $subdir := .Subdir -}}
{{ $discriminatorProp := .DiscriminatorProp}}
//go:embed {{$subdir}}
var __gen_jsonschema_fs embed.FS

var errNoDiscriminator = errors.New("no discriminator property '{{$discriminatorProp}}' found")

func __gen_jsonschema_panic(fname string, err error) {
	panic(fmt.Sprintf("error reading %s from embedded FS: %s", fname, err.Error()))
}

{{ range .SchemaMethods }}
func ({{if .IsPointer}}*{{end}}{{.Receiver.TypeName}}) {{.SchemaMethodName}}() json.RawMessage {
	const fileName = "{{$subdir}}/{{.Receiver.TypeName}}.json"
	data, err := __gen_jsonschema_fs.ReadFile(fileName)
	if err != nil {
		__gen_jsonschema_panic(fileName, err)
    }
	return data
}
{{ end -}}
{{ range .SpecialTypes -}}
{{$initial := .Initial -}}
// UnmarshalJSON is a generated custom json.Unmarshaler implementation for
// {{.Name}}.
func ({{.Initial}} *{{.Name}}) UnmarshalJSON(b []byte) (err error) {
	type Wrapper struct {
		*{{.Name}}
		{{range .InterfaceProps -}}
		{{.FieldNames}} json.RawMessage {{.StructTag}}
		{{ end -}}
	}
	var wrapper Wrapper
	if err = json.Unmarshal(b, &wrapper); err != nil {
		return err
	} {{ range .InterfaceProps }} else if {{$initial}}.{{.FieldNames}}, err = {{.UnmarshalerFunc}}(wrapper.{{.FieldNames}}); err != nil {
		return err
	}{{ end }}
	return nil
}
{{ end -}}
{{ range .Interfaces -}}
func {{.UnmarshalerFunc}}(data []byte) ({{.TypeNameWithPrefix}}, error) {
	var (
		temp          map[string]json.RawMessage
		discriminator string
		err         = json.Unmarshal(data, &temp)
	)

	if err != nil {
		return nil, err
	} else if _tempDiscriminator, ok := temp["{{$discriminatorProp}}"]; !ok {
		return nil, errNoDiscriminator
	} else if err = json.Unmarshal(_tempDiscriminator, &discriminator); err != nil {
		return nil, __jsonschema__unmarshalDiscriminatorError(_tempDiscriminator, err)
	}
	switch discriminator {
	{{range .Options -}}
	case "{{.Discriminator}}":
		var obj {{.TypeNameWithPrefix}}
		if err = json.Unmarshal(data, &obj); err != nil {
			return nil, err
		}
		return {{if .Pointer}}&{{end}}obj, nil
	{{ end -}}
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", discriminator)
	}
}
{{ end }}
{{ if .HaveInterfaces -}}
func __jsonschema__unmarshalDiscriminatorError(discriminator json.RawMessage, err error) error {
	return fmt.Errorf("unable to unmarshal discriminator value %v: %w", discriminator, err)
}
{{ end -}}