//go:build !jsonschema
// +build !jsonschema

// Code generated by go-gen-jsonschema. DO NOT EDIT.
package providers

import (
	"bytes"
	"embed"
	"encoding/json"
	"errors"
	"fmt"
	"text/template"
)

//go:embed jsonschema
var __gen_jsonschema_fs embed.FS

var errNoDiscriminator = errors.New("no discriminator property '!type' found")

func __gen_jsonschema_panic(fname string, err error) {
	panic(fmt.Sprintf("error reading %s from embedded FS: %s", fname, err.Error()))
}

func (r Example) __schemaData__Example__Schema() (map[string]string, error) {
	data := make(map[string]string)
	var (
		m   json.Marshaler
		b   []byte
		err error
	)
	m = r.ASchema()
	if b, err = m.MarshalJSON(); err != nil {
		return nil, err
	}
	data["a"] = string(b)
	m = r.BSchema(r.B)
	if b, err = m.MarshalJSON(); err != nil {
		return nil, err
	}
	data["b"] = string(b)
	m = BoolSchemaFunc(r.C)
	if b, err = m.MarshalJSON(); err != nil {
		return nil, err
	}
	data["c"] = string(b)
	return data, nil
}

func (r Example) Schema() json.RawMessage {
	const fileName = "jsonschema/Example.json"
	tplBytes, err := __gen_jsonschema_fs.ReadFile(fileName)
	if err != nil {
		__gen_jsonschema_panic(fileName, err)
	}
	data, err := r.__schemaData__Example__Schema()
	if err != nil {
		__gen_jsonschema_panic(fileName, err)
	}
	var out bytes.Buffer
	if err := template.Must(template.New("").Parse(string(tplBytes))).Execute(&out, data); err != nil {
		__gen_jsonschema_panic(fileName, err)
	}
	return json.RawMessage(out.Bytes())
}
